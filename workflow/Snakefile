SAMPLES = [0, 1, 2]
MODES = ["classic"] # TODO "pooled",

rule all:
    input:
        expand("results/viloca_{mode}/snv/SNVs_0.010000_final.vcf", mode=MODES)

rule simulate_haplos:
    params:
        len=30
    output:
        directory("results/haplos"),
        "results/haplos/sample0-1.fasta", # just to make sure dir is created
        expand("results/ground_truth_sample{id}.csv", id=SAMPLES),
        "results/MasterSequence.fasta"
    conda:
        "envs/simulate_haplos.yaml"
    script:
        "scripts/simulate_haplos.R"

rule simulate_reads:
    params:
        coverage=1000
    input:
        fin="results/haplos"
    output:
        "results/alignments/sample0.bam", # just to make sure dir is created
        out=directory("results/alignments"),
        bam=expand("results/alignments/sample{id}.bam", id=SAMPLES),
        bai=expand("results/alignments/sample{id}.bam.bai", id=SAMPLES),
        merged_bam="results/alignments/merged.bam",
        merged_bai="results/alignments/merged.bam.bai"
    conda:
        "envs/simulate_reads.yaml"
    script:
        "scripts/simulate_reads.py"

rule run_viloca:
    input:
        ref="results/MasterSequence.fasta",
        bam=expand("results/alignments/sample{id}.bam", id=SAMPLES),
        bai=expand("results/alignments/sample{id}.bam.bai", id=SAMPLES),
        merged_bam="results/alignments/merged.bam"
    output:
        "results/viloca_{mode}/snv/SNVs_0.010000_final.vcf"
    conda:
        "envs/run_viloca.yaml"
    benchmark:
        "results/benchmark_{mode}.tsv"
    script:
        "scripts/run_viloca.py"

rule benchmark:
    input:
        vcf_list=expand("results/viloca_{mode}/snv/SNVs_0.010000_final.vcf", mode=MODES), # TODO this file correct? replicates necessary?
        groundtruth_list=expand("results/ground_truth.csv"), # TODO which gt to use?
        benchmark_list=expand("results/benchmark_{mode}.tsv", mode=MODES)
    output:
        dname_out=directory("results/benchmark/"),
    conda:
        "envs/benchmark.yaml"
    script:
        "scripts/benchmark.py"